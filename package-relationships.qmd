---
title: 'Package relationships'
---

```{r, echo = FALSE, results = 'hide', warning=FALSE, message=FALSE}
library(tidyverse)
pkgs <- read_csv('pkgs.csv') |> 
  mutate(
    logo = paste0('hexes/hex_', name, '.png'),
    .after = name
  )

get_my_deps <- function(packages) {
  lapply(packages, function(x) {
    dfile <- desc::desc(package = x)
    deps <- gsub(
      ' ?\\(.+\\)', '', 
      c(
        dfile$get_list('Depends', default = character(1)),
        dfile$get_list('Imports', default = character(1)), 
        dfile$get_list('LinkingTo', default = character(1))
      )
    )
    intersect(deps, packages)
  }) |> 
    stats::setNames(packages)
}

connect_deps <- function(l) {
  lapply(seq_along(l), function(i) {
    if (length(l[[i]]) > 0) {
      paste0(l[[i]], ' --> ' , names(l)[i])
    }
  }) |> 
    unlist() |> 
    unique()
}

embrace_deps <- function(packages, cran_packages) {
  if (missing(cran_packages)) {
    cran_packages <- tools::CRAN_package_db()$Package
    cran_packages <- intersect(cran_packages, packages)
  }
  redistverse_packages <- c(
    'redistverse',
    'redist', 'redistmetrics', 'geomander', 'ggredist', 'censable', 
    'tinytiger', 'PL94171', 'alarmdata'
  )
  packages <- c(packages[packages %in% redistverse_packages], packages[!packages %in% redistverse_packages])
  
  ifelse(
    packages %in% cran_packages, 
    paste0(packages, '{{', packages, '}}'), 
    paste0(packages, '((', packages, '))')
  )
}

deps <- get_my_deps(pkgs$name)
paste0('  ',
       c(
         embrace_deps(pkgs$name),
         connect_deps(deps)
       )) |> 
  cat(sep = '\n')
```

```{mermaid}
flowchart LR
  redist{{redist}}
  redistmetrics{{redistmetrics}}
  geomander{{geomander}}
  PL94171{{PL94171}}
  censable{{censable}}
  tinytiger{{tinytiger}}
  alarmdata{{alarmdata}}
  ggredist{{ggredist}}
  redistverse{{redistverse}}
  dots{{dots}}
  cvap{{cvap}}
  ppmf{{ppmf}}
  divseg{{divseg}}
  name{{name}}
  jot{{jot}}
  ei{{ei}}
  congress{{congress}}
  feltr{{feltr}}
  planscorer{{planscorer}}
  crayons{{crayons}}
  apportion{{apportion}}
  gptzeror{{gptzeror}}
  bskyr{{bskyr}}
  redistio((redistio))
  palette{{palette}}
  ThemePark((ThemePark))
  baf{{baf}}
  redistmetrics --> redist
  censable --> geomander
  tinytiger --> geomander
  tinytiger --> PL94171
  tinytiger --> censable
  censable --> cvap
  censable --> ppmf
  censable --> alarmdata
  geomander --> alarmdata
  redist --> alarmdata
  redistmetrics --> alarmdata
  tinytiger --> alarmdata
  palette --> ggredist
  redist --> redistverse
  redistmetrics --> redistverse
  geomander --> redistverse
  ggredist --> redistverse
  censable --> redistverse
  tinytiger --> redistverse
  PL94171 --> redistverse
  alarmdata --> redistverse
  palette --> crayons
  geomander --> redistio
  ggredist --> redistio
  redistmetrics --> redistio
```


```{r, echo = FALSE}
library(DiagrammeR)

tb_node <- tibble(
  name = names(deps), 
  deps = unname(deps),
  type = pkgs$status
)

tb_edge <- tb_node |> 
  unnest_longer(deps)


nodes <- create_node_df(
  n = nrow(tb_node), 
  label = tb_node$name, 
  type = tb_node$type
) 
edges <- create_edge_df(
  to = match(tb_edge$name, tb_node$name), 
  from = match(tb_edge$deps, tb_node$name)
)
htmlwidgets::setWidgetIdSeed(seed = 1)
create_graph(
  nodes_df = nodes,
  edges_df = edges
) |> 
  select_nodes(conditions = type == 'CRAN') |> 
  set_node_attrs_ws(node_attr = shape, value = 'rect') |>
  invert_selection() |>
  set_node_attrs_ws(node_attr = shape, value = 'ellipse') |>
  clear_selection() |>
  colorize_node_attrs(node_attr_from = type, node_attr_to = fillcolor,
                      palette = c('#e07a5f', '#81b29a')) |>
  set_node_attrs(node_attr = fontcolor, values = 'black') |> 
  render_graph(layout = 'kk', )
```

