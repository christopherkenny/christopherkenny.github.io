{
  "hash": "d7eb6ee72ae5040b2549713537d66c07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Making a Scheduled Bot for Bluesky Social in R\"\ndate: \"2023-12-30\"\ndescription: |\n  Explaining the mechanics behind my CRAN Updates bot for Bluesky Social.\ncategories: [r-pkg, bskyr]\nimage: \"bsky profile.png\"\nimage-alt: \"The Bluesky profile for the CRAN Updates bot.\"\ndraft: true\neditor: \n  markdown: \n    wrap: sentence\nknitr:\n  opts_chunk: \n    echo: false\n---\n\n\nThis post walks through how I set up a simple bot in Bluesky Social.\nThe bot, [@cranupdates.bsky.social](https://bsky.app/profile/cranupdates.bsky.social), posts every 4 hours with details about packages that have been updated, added, or removed from CRAN.\nEverything is run in R, primarily using the [bskyr](https://christophertkenny.com/bskyr/) package.\nIt's run for free on GitHub Actions and data is stored between runs using Google Sheets.\n\nThe basic mechanics of the bot are:\n\n- fetch currently available packages with `available.packages()`\n- load the last run's data from Google Sheets\n- compare the two and identify changes\n- make posts with `bs_post()` for new packages, updated packages, and removed packages\n- save the current data to Google Sheets\n\nThis bot is entirely schedule based, so it doesn't need to interact with other Bluesky users.\nBelow, I detail how I set up the bot, including how to authenticate with Google Sheets (using [`googlesheets4`](https://googlesheets4.tidyverse.org/)) and GitHub Actions.\n\n\n# Setting up the bot\n\nTo set up the bot, we first need a public GitHub repo.^[You could use something more private, but for a generic bot, public means GitHub Actions is free and can get the job done.]\nFor my CRAN Update bot, I placed it in [`christopherkenny/bskyr-cran-bot`](https://github.com/christopherkenny/bskyr-cran-bot).\n\nNow, the basic file structure of the repo looks like:\n\n```\n.\n├── .github\n│   └── workflows\n│       └── post.yml\n├── bskyr-cran-bot.Rproj\n├── readme.md\n├── inst\n│   └── secret\n│       └── bskyr-cran-bot.json\n└── post.R\n```\n\nThe `.github` folder contains the workflow file, `post.yml`, which tells GitHub Actions what to do and is discussed in @sec-schedule.\nYou don't need a `bskyr-cran-bot.Rproj` or `readme.md` files, but they're nice to have.\nThe `inst` folder contains the `secret` folder, which contains the `bskyr-cran-bot.json` file, which is used to authenticate with Google and is discussed in @sec-auth.\nFinally, `post.R` is the script that does the work.\n\nFirst, let's explain `post.R`.\n\n\n## Scheduling the run {#sec-schedule}\n\nTo schedule the run, we need to tell it a few things:\n\n- when to run it\n- what to run\n  - what environment variables it needs\n  - what R version to use\n  - what R packages to install\n  - what script to run\n  \nBelow, I explain these steps. But first, the completed workflow looks like:\n\n```yaml\non:\n  push:\n    branches: main\n  schedule:\n    - cron: '0 1,5,9,13,17,21 * * *'\n\nname: Post\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      BLUESKY_APP_USER: ${{ secrets.BLUESKY_APP_USER }}\n      BLUESKY_APP_PASS: ${{ secrets.BLUESKY_APP_PASS }}\n      GARGLE_KEY: ${{ secrets.GARGLE_KEY }}\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: 'release'\n\n      - uses: r-lib/actions/setup-r-dependencies@v2\n        with:\n          packages:\n            any::here\n            any::dplyr\n            any::stringr\n            any::googlesheets4\n            any::bskyr\n\n      - run: Rscript 'post.R'\n```\n\nThis whole file lives in `.github/workflows/post.yml` in the [repo](https://github.com/christopherkenny/bskyr-cran-bot/blob/main/.github/workflows/post.yml).\n\nFirst, let's break down the when part:\n\n```yaml\non:\n  push:\n    branches: main\n  schedule:\n    - cron: '0 1,5,9,13,17,21 * * *'\n\n```\n\nThis tells GitHub Actions to run the workflow when there's a push to the `main` branch.\nIt also says to schedule the workflow to run every 4 hours.\nCRON entries are `minute hour day month weekday`, so `0 1,5,9,13,17,21 * * *` means to run at 1am, 5am, 9am, 1pm, 5pm, and 9pm every day.\nAs implied, setting the star says to run it every day, every month, and every weekday.\nMore documentation for the `schedule` part can be found [here](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule).\n\nThen we give the job a name, \"Post\", with `name: Post`.\n\nThe next section simply indicates we want the job to run on the latest version of Ubuntu:\n\n```yaml\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n```\nNext, we provide environment variables, that we set in the repo settings. \nSee {#sec-auth} for an explanation of the `env` variables.\n\n```yaml\n    env:\n      BLUESKY_APP_USER: ${{ secrets.BLUESKY_APP_USER }}\n      BLUESKY_APP_PASS: ${{ secrets.BLUESKY_APP_PASS }}\n      GARGLE_KEY: ${{ secrets.GARGLE_KEY }}\n```\n\nNow, we can give it the steps to use. \n\n\nFirst, it needs to download the contents of the repo, so that it can access our `post.R` script.\n\n\n```yaml\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n```\n\nThen, we have to let it know to install R. \nWe can use one of the [`r-lib/actions`](https://github.com/r-lib/actions) actions, [`setup-r@v2`](https://github.com/r-lib/actions/tree/v2/setup-r).\nI'm using the released R version (4.3.2) at the time of writing this.\nYou could pin a specific version, but for bots, I plan to do the minor maintenance necessary as R versions increment.\n\n```yaml\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: 'release'\n```\n\nAnd then we list the packages we need. \nThis uses the [`setup-r-dependencies@v2`](https://github.com/r-lib/actions/tree/v2/setup-r-dependencies) action, again from [`r-lib/actions`](https://github.com/r-lib/actions).\nBelow, I make use of the  prefixes: `any::` and `github::`.\n`any::` is used for packages on CRAN, generally, but will also run if you've installed it elsewhere through a prior dependency.\n\n:::{.callout-tip collapse=\"false\"}\n\n## Using GitHub Packages\n\nYou can use `github::` in place of `any::` for packages on GitHub. \nYou just need to specify the user and repo.\nSo, if you want to use the dev version of a package, like `bskyr`, you could use the syntax:\n`github::christopherkenny/bskyr`.\n\n:::\n\n\n```yaml\n      - uses: r-lib/actions/setup-r-dependencies@v2\n        with:\n          packages:\n            any::here\n            any::dplyr\n            any::stringr\n            any::googlesheets4\n            any::bskyr\n\n```\nIf you already use `renv`, you could instead use that with the [`setup-renv`](https://github.com/r-lib/actions/tree/v2/setup-renv) action.\n\nFinally, we tell it to run `post.R` with:\n```yaml\n      - run: Rscript 'post.R'\n```\n\n\n# Authenticating with Google for GitHub Actions {#sec-auth}\n\n\t- Service account (link for details)\n\t- Share sheet with service account\n\t- x <- gargle::secret_make_key(); Sys.setenv(GARGLE_KEY = x)\n\t- Add to gh actions\n\t- run secret_encrypt_json('path/to/downloaded/key.json', 'where/to/save/it.json', key = 'GARGLE_KEY')\n\t- update the workflow. see https://gargle.r-lib.org/articles/managing-tokens-securely.html#ci-configuration",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}