{
  "hash": "6dcc7a69603f858858f0e48840d02a8a",
  "result": {
    "markdown": "---\ntitle: \"Making Maps with `feltr`\"\ndate: \"2023-07-07\"\ndescription: |\n  A brief introduction to the `feltr` package.\ncategories: [maps, r-pkg]\nimage: \"hex_feltr.png\"\nimage-alt: \"A hexagonal logo for the R package Feltr with the word feltr in the foreground and a small map in the background.\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\nI make a lot of maps, almost always in R. \nRecently, I was introduced to [felt.com](https://felt.com).\nIt's a clean interface for web maps, including some great features, like drawing directly on a map or adding text annotations.\n\nThe new [`feltr` package](https://christophertkenny.com/feltr/) offers an interface to the [Felt API](https://feltmaps.notion.site/Getting-Started-With-The-Felt-API-69c8b02b7d8e436daa657a04a2dbaffa), so you can upload data to Felt directly from R.\nIt also includes tools for reading data from Felt into R as [`sf`](https://r-spatial.github.io/sf/) objects.\n\nYou can install [`feltr`](https://cran.r-project.org/web/packages/feltr/index.html) with:\n\n```r\ninstall.packages('feltr')\n```\nBelow, I'll demo making a map with point locations of Dunkins in Cambridge, MA, from a `csv` file of Dunkin addresses.\n\n## Dunkins in Cambridge, MA\n\nFirst, we'll load a few packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(feltr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/chris/Documents/GitHub/christopherkenny.github.io\n```\n:::\n:::\n\nOne of the cool things with Felt is its [\"Upload Anything\"](https://felt.com/blog/upload-anything) feature, where we can upload *anything*.\nHere, we have a `csv` file of addresses for every Dunkin in Cambridge.\nIt is simple, just text addresses separated into appropriate fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_dunkin_ma <- here('posts/2023-07-07-making-maps-with-feltr/dunkin_ma.csv')\nread_csv(path_dunkin_ma, show_col_types = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,062 × 5\n   address           city     state zipcode    id\n   <chr>             <chr>    <chr> <chr>   <dbl>\n 1 147 N Quincy St   Abington MA    02351       1\n 2 259 Brockton Ave  Abington MA    02351       2\n 3 323 Centre Ave    Abington MA    02351       3\n 4 937 Bedford St    Abington MA    02351       4\n 5 100 Powdermill Rd Acton    MA    01720       5\n 6 182 Great Rd      Acton    MA    01720       6\n 7 212 Main St       Acton    MA    01720       7\n 8 315 Main St       Acton    MA    01720       8\n 9 44 Great Rd       Acton    MA    01720       9\n10 150 S Main St     Acushnet MA    02743      10\n# ℹ 1,052 more rows\n```\n:::\n:::\n\n\nTo share this data with Felt, we first have to make a new map.\nWe don't have to give it any information, it'll just make an empty map.\nWe can pass it a title and some starting information, like where to center the map and how far to zoom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndunk <- felt_create_map(\n  title = 'Cambridge Dunkin Desert', \n  zoom = 14.5, lat = 42.3799, lon = -71.10668\n)\n```\n:::\n\n\nThen once we have the map, we can upload the `csv` file directly to Felt.\nNo local geocoding necessary, it'll handle that.\nWe can label the layer with `name` or supply colors, like `fill_color` and `stroke_color`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_id <- felt_add_map_layers(\n  map_id = dunk$id, name = 'Dunkin', file_names = path_dunkin_ma, \n  fill_color = '#FF671F', stroke_color = '#DA1884'\n)\n```\n:::\n\n\nOnce we do that, after a couple of minutes, we have a map.\nNormally it's a few seconds if we uploaded a `geojson` or `shp` file, but geocoding takes a small bit of time.\n\n\n![Default Felt Layout](dunkin_default.png){fig-alt=\"A map of Cambridge, MA with the default Felt styling.\"}\n\nWhat I find great about this is that I can handle all of the data work in R and then adjust the map as needed after.\nFor example, I can annotate where the Department of Government buildings are with a green star or highlight where Darwin's was (until recently) with a blue x.\n\n![Annotated Map](dunkin_adjusted.png){fig-alt=\"A map of Cambridge, MA from Felt with annotations added.\"}\n\nClearly, Darwin's old location would be a great place for a new Dunkin, near the middle of an existing Dunkin desert.\n\n`feltr` has additional features, including:\n\n- deleting maps with `felt_delete_map()`\n- listing details of existing maps with `felt_get_map()` and `felt_get_map_layers()`\n- downloading shapes with `felt_get_map_sf()`, `felt_get_map_geojson()`, and `felt_get_map_elements()`\n- retrieving user details with `felt_get_user()`.\n\nAll current features of the [Felt API](https://feltmaps.notion.site/Getting-Started-With-The-Felt-API-69c8b02b7d8e436daa657a04a2dbaffa) are supported in the CRAN version of `feltr`, as of July 2023.\nTo offer feedback on `feltr` or ask questions, [open an issue on GitHub](https://github.com/christopherkenny/feltr/issues).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}