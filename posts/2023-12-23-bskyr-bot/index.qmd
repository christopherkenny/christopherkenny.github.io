---
title: "Making a Scheduled Bot for Bluesky Social in R"
date: "2023-12-23"
description: |
  Explaining the mechanics behind my CRAN Updates bot for Bluesky Social.
categories: [r-pkg, bskyr]
image: "bsky profile.png"
image-alt: "The Bluesky profile for the CRAN Updates bot."
draft: true
editor: 
  markdown: 
    wrap: sentence
knitr:
  opts_chunk: 
    echo: false
---

This post walks through how I set up a simple bot in Bluesky Social.
The bot, [@cranupdates.bsky.social](https://bsky.app/profile/cranupdates.bsky.social), posts every 4 hours with details about packages that have been updated, added, or removed from CRAN.
Everything is run in R, primarily using the [bskyr](https://christophertkenny.com/bskyr/) package.
It's run for free on GitHub Actions and data is stored between runs using Google Sheets.

The basic mechanics of the bot are:

- fetch currently available packages with `available.packages()`
- load the last run's data from Google Sheets
- compare the two and identify changes
- make posts with `bs_post()` for new packages, updated packages, and removed packages
- save the current data to Google Sheets

This bot is entirely schedule based, so it doesn't need to interact with other Bluesky users.
Below, I detail how I set up the bot, including how to authenticate with Google Sheets (using [`googlesheets4`](https://googlesheets4.tidyverse.org/)) and GitHub Actions.


# Setting up the bot

- Create github repo

## Scheduling the run

To schedule the run, we need to tell it a few things:

- when to run it
- what to run
  - what environment variables it needs
  - what R version to use
  - what R packages to install
  - what script to run
  
Below, I explain these steps. But first, the completed workflow looks like:

```yaml
on:
  push:
    branches: main
  schedule:
    - cron: '0 1,5,9,13,17,21 * * *'

name: Post

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      BLUESKY_APP_USER: ${{ secrets.BLUESKY_APP_USER }}
      BLUESKY_APP_PASS: ${{ secrets.BLUESKY_APP_PASS }}
      GARGLE_KEY: ${{ secrets.GARGLE_KEY }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages:
            any::here
            any::dplyr
            any::stringr
            any::googlesheets4
            github::christopherkenny/bskyr

      - run: Rscript 'post.R'
```

This whole file lives in `.github/workflows/post.yml` in the [repo](https://github.com/christopherkenny/bskyr-cran-bot/blob/main/.github/workflows/post.yml).

First, let's break down the when part:

```yaml
on:
  push:
    branches: main
  schedule:
    - cron: '0 1,5,9,13,17,21 * * *'

```

This tells GitHub Actions to run the workflow when there's a push to the `main` branch.
It also says to schedule the workflow to run every 4 hours.
CRON entries are `minute hour day month weekday`, so `0 1,5,9,13,17,21 * * *` means to run at 1am, 5am, 9am, 1pm, 5pm, and 9pm every day.
As implied, setting the star says to run it every day, every month, and every weekday.
More documentation for the `schedule` part can be found [here](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule).




See {#sec-auth} for an explanation of the `env` variables.






# Authenticating with Google for GitHub Actions {#sec-auth}

	- Service account (link for details)
	- Share sheet with service account
	- x <- gargle::secret_make_key(); Sys.setenv(GARGLE_KEY = x)
	- Add to gh actions
	- run secret_encrypt_json('path/to/downloaded/key.json', 'where/to/save/it.json', key = 'GARGLE_KEY')
	- update the workflow. see https://gargle.r-lib.org/articles/managing-tokens-securely.html#ci-configuration